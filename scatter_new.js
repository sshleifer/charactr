// Generated by CoffeeScript 1.9.2
(function() {
  var addXax, center, dispatch, div, exp, height, margin, re2, svg, tabulate, tooltip, width, xAxis, xMap, xScale, xValue, yAxis, yMap, yScale, yValue;

  margin = {
    top: 20,
    right: 500,
    bottom: 50,
    left: 50
  };

  width = parseInt(d3.select('body').style('width'), 10) - margin.left - margin.right;

  height = 500 - margin.top - margin.bottom;

  exp = .4;

  center = (width - margin.right) / 2 + margin.left;

  xValue = function(d) {
    return d.lensent;
  };

  xScale = d3.scale.pow().exponent(exp).range([0, width]).nice();

  xMap = function(d) {
    return xScale(xValue(d));
  };

  xAxis = d3.svg.axis().scale(xScale).orient('bottom');

  yValue = function(d) {
    return d.lenrec;
  };

  yScale = d3.scale.pow().exponent(exp).range([height, 0]).nice();

  yMap = function(d) {
    return yScale(yValue(d));
  };

  yAxis = d3.svg.axis().scale(yScale).orient('left');

  String.prototype.startsWith = function(str) {
    return this.indexOf(str) === 0;
  };

  dispatch = d3.dispatch("load", "statechange");

  div = d3.select("body").append("div").attr("class", "table").style("opacity", 0);

  svg = d3.select('body').append('svg').attr({
    'width': width + margin.left + margin.right,
    'height': height + margin.top + margin.bottom
  }).append('g').attr({
    'transform': 'translate(' + margin.left + ',' + margin.top + ')'
  });

  tooltip = d3.select('body').append('div').attr({
    'class': 'tooltip'
  });

  tabulate = function(d1, columns) {
    var cells, data, rows, table, tbody, thead;
    data = d1.sort(function(a, b) {
      return b.totlen - a.totlen;
    }).slice(0, 15);
    table = d3.select("body").append("table").attr({
      'transform': 'translate(' + 0 + ',' + margin.top + ')'
    });
    thead = table.append("thead");
    tbody = table.append("tbody");
    thead.append("tr").selectAll("th").data(columns).enter().append("th").text(function(column) {
      return column;
    });
    rows = tbody.selectAll("tr").data(data).enter().append("tr");
    cells = rows.selectAll('td').data(function(row) {
      return columns.map(function(column) {
        return {
          column: column,
          value: row[column]
        };
      });
    }).enter().append("td").html(function(d) {
      if (typeof d.value === 'string') {
        return d.value.trim();
      } else if (d.value < 1) {
        return d3.round(100 * d.value, 2) + "%";
      } else {
        return d.value;
      }
    });
    return table;
  };

  d3.csv('ppl.csv', (function(error, data) {
    var byName, peopleTable, sum;
    byName = d3.map();
    sum = 0;
    data.forEach(function(d) {
      d.lensent = +d.lensent;
      d.lenrec = +d.lenrec;
      d.totlen = +d.totlen;
      d.pct_sent = d.lensent / d.totlen;
      sum = sum + d.totlen;
      d.cname = d.cname.trim();
      return byName.set(d.cname.trim(), d);
    });
    data.forEach(function(d) {
      return d.of_total = d.totlen / sum;
    });
    console.log('TotChars', sum);
    dispatch.load(data);
    return peopleTable = tabulate(data, ["cname", "pct_sent", "totlen", "of_total"]);
  }));

  dispatch.on("load.scatter", function(data) {
    xScale.domain([d3.min(data, xValue) - 1, d3.max(data, xValue) + 1]);
    yScale.domain([d3.min(data, yValue) - 1, d3.max(data, yValue) + 1]);
    svg.append("g").attr("class", "xaxis").attr("transform", "translate(0," + height + ")").call(xAxis).selectAll("text").style("text-anchor", "end").attr("dx", "-.8em").attr("dy", ".15em").attr("transform", "rotate(-65)");
    svg.select("g").append('text').attr({
      'class': 'lab1',
      'x': width,
      'y': -6
    }).attr("dy", ".15em").attr({
      'text-anchor': 'end'
    }).text('Characters Sent (Scale is exponential)');
    svg.append('g').attr({
      'class': 'yaxis'
    }).call(yAxis).append('text').attr({
      'class': 'lab2',
      'transform': 'rotate(-90)',
      'y': 6,
      'dy': '.71em'
    }).style({
      'text-anchor': 'end'
    }).text('Characters Received');
    svg.selectAll('.dot').data(data).enter().append('circle').attr({
      'id': (function(d) {
        return d.cname;
      }),
      'class': 'dot',
      'r': 3,
      'cx': xMap,
      'cy': yMap
    }).style({
      'opacity': .7,
      'fill': 'rgb(0,105,225)'
    }).on('mouseover', function(d) {
      return tooltip.html('<b><u>' + d.cname + '</u>' + '<br/> sent: ' + d.lensent + '<br/> received: ' + d.lenrec + '<br/> total: ' + d.totlen + '<br/> first: ' + d.start + '<br/> last: ' + d.end + '</b>').style({
        'opacity': 1,
        'left': d3.event.pageX + 5 + 'px',
        'top': d3.event.pageY - 10 + 'px'
      });
    });
    return dispatch.on("statechange.scatter", function(selectValue, data) {
      var k;
      console.log('selecting', selectValue);
      console.log('take 2:', d3.select('select').property('value'));
      d3.select('body').append('p').text(selectValue + ' is the last selected option.');
      k = svg.selectAll(".dot");
      k.filter(function(data) {
        return data.cname === selectValue;
      }).style({
        "fill": "red"
      }).attr({
        'r': 10
      });
      return console.log('tried to select', '#' + selectValue);
    });
  });

  dispatch.on("load.menu", function(data) {
    var select;
    select = d3.select('body').append('div').append('select').attr({
      'class': 'select',
      'color': "red"
    });
    select.selectAll('option').data(data).enter().append('option').attr({
      "value": function(d) {
        return d.cname;
      }
    }).text(function(d) {
      return d.cname;
    });
    console.log('select.value', d3.select('select').property('value'));
    select.on('change', function() {
      return dispatch.statechange(this.value, data);
    });
    return console.log('with this', this.value);
  });

  'select.on(\'change\' ,(d) -> #needs to be sent data\nselectValue = d3.select(\'select\').property(\'value\')\nconsole.log(\'selected\', selectValue)\nd3.select(\'body\').append(\'p\').text(selectValue + \' is the last selected option.\')\nconsole.log(\'now to dots\')\nk = svg.selectAll(".dot")\nconsole.log(k)\nk.filter ((d) ->\n  return d.cname.startsWith(selectValue.slice(0,4))).style(\'fill\':\'red\')\nconsole.log(\'tried to select\', \'#\' + selectValue)\nreturn\n)';

  addXax = function(height, width) {
    xScale = d3.scale.pow().exponent(exp).range([0, width]).nice();
    xAxis = d3.svg.axis().scale(xScale).orient('bottom');
    d3.select('svg').select("g").select(".xaxis").attr("transform", "translate(0," + height + ")").call(xAxis);
    d3.select('svg').select("g").select('.xaxis').select('.lab1').attr({
      'x': width
    }).attr("dy", ".15em");
  };

  re2 = function() {
    console.log('2. Resizing from width' + width);
    width = parseInt(d3.select("body").style("width"), 10) - margin.left - margin.right;
    console.log('2a. Resizing from width' + width);
    console.log('2a. Resizing to height: ' + height);
    addXax(height, width);
  };

  console.log("all the points", xAxis.scale().ticks(xAxis.ticks()));

  console.log('height', d3.select('body').style('height'));

  console.log('peter'.startsWith('p'));

}).call(this);
